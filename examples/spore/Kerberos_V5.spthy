theory Kerberos_V5
begin

section{* The Kerberos Protocol, Version 5 *}

text{*
Modeled after SPORE.

Notable differences.

  1. We use explicit global constants instead of implicit typing to identify
     the different encryptions.

  2. We do not model the timestamps and the timing properties because our
     model does not support reasoning about them yet. We use nonces that are
     leaked immediately after generation for timestamps and prove the
     agreement properties over them.

  3. The authentication properties in SPORE are not formulated precisely
     enough. Some directions of agreement are only satisfied under additional
     assumptions. See the notes below (in the original source). We prove now
     the strongest authentication that can be proven without additional
     assumptions. Some more work is required to check whether these are
     sufficient for the real-world applications where Kerberos is used.
  
  4. We identify client and user. Therefore, the user key Ku in the
     description in SPORE is modeled as k(A,C).

Note that we do not model the loss of authentication, server, and session
keys. The Isabelle models could handle that thanks to the work done by Martin
Schaub in his master thesis [1], but scyther-proof does not (yet).

[1] Schaub, Martin. Efficient Interactive Construction of Machine-Checked
    Protocol Security Proofs in the Context of Dynamically Compromising
    Adversaries.  Eidgenoessische Technische Hochschule Zuerich, Departement
    Informatik (2011).  doi:10.3929/ethz-a-006450686.
*}

protocol Kerberos
{
  1. C -> A: C, G, L1, N1

  2_leak. A -> : T1start, T1expire
  
  2.   <- A: A, C, {'2_1', C, G, AuthKey, T1start, T1expire }k(G,A), 
                   {'2_2', G,    AuthKey, T1start, T1expire }k(C,A)
     C <-  : A, C, TicketGrantingTicket,       
                   {'2_2', G,    AuthKey, T1start, T1expire }k(C,A)

  3_leak. C -> : T1
  3. C ->  : A, S, L2, N2, TicketGrantingTicket,      
                           {'3', C, T1}AuthKey
       -> G: A, S, L2, N2, {'2_1', C, G, AuthKey, T1start, T1expire }k(G,A), 
                           {'3', C, T1}AuthKey

  4_leak. G -> : T2start, T2expire
  4.   <- G: C, {'4_1', C, S, ServerKey, T2start, T2expire}k(G,S), 
                {'4_2',    S, ServerKey, T2start, T2expire, N2}AuthKey 
     C <-  : C, ServerTicket,                
                {'4_2',    S, ServerKey, T2start, T2expire, N2}AuthKey 

  5_leak. C -> : T2
  5. C ->  : G, ServerTicket,                 
                {'5', C, T2}ServerKey
       -> S: G, {'4_1', C, S, ServerKey, T2start, T2expire}k(G,S),  
                {'5', C, T2}ServerKey     

  6. C <- S: {'6', T2}ServerKey
}


subsection{* Secrecy Properties *}

properties (of Kerberos)
  A_AuthKey_secret: secret(A, -, AuthKey, {C,A,G})
  C_AuthKey_secret: secret(C, 2, AuthKey, {C,A,G})
  T_AuthKey_secret: secret(G, 3, AuthKey, {C,A,G})

  G_ServerKey_secret: secret(G, -, ServerKey, {C,A,G,S})
  C_ServerKey_secret: secret(C, 4, ServerKey, {C,A,G,S})


text{*
Server key secrecy is not given as it cannot check that authenticator is
uncompromised; i.e., the following does not hold

  S_ServerKey_secret: secret(S, 5, ServerKey, {C,A,G,S})

*}


subsection{* Authentication Properties *}

text{*
We first prove the following first send property to speedup the proof search.
*}

property (of Kerberos) C_N2_first_send:
  premises
    "role(1) = C"
    "knows(N2#1)"
  imply
    "St(1,C_3) < Ln(N2#1)"

// Authentication for A is rather weak, as it receives all values in plain.
property (of Kerberos) A_auth:
  premises
    "role(2) = A"
    "uncompromised(C#2, A#2, G#2, S#2)"
    "step(2, A_2)"
  imply 
    "
     // A doesn't receive T1start and T1expire authenticated. Hence, there
     // doesn't even have to be a client that sent them.

     // ordering: only that A_1 happened before A_2 can be proven
     St(2, A_1) < St(2, A_2)
    "

property (of Kerberos) G_auth:
  premises
    "role(3) = G"
    "uncompromised(C#3, A#3, G#3, S#3)"
    "step(3, G_3)"
  imply threads 1, 2 such that
    "
     // consequence from exchange with client
     role(1) = C &
     A#1 = A#3 & 
     C#1 = C#3 & 
     G#1 = G#3 &
     AuthKey#1   = AuthKey#3 &
     T1#1        = T1#3 &  
     T1start#1   = T1start#3 &
     T1expire#1  = T1expire#3 &
     // S#1 = S#3                    // no agreement on them, as they are not
     // ServerKey#1 = ServerKey#3 &  // guaranteed to be known to the client
     // T2start#1   = T2start#3 &   
     // T2expire#1  = T2expire#3 &  

     // consequence from exchange with authenticator
     role(2) = A &
     A#3 = A#2 & 
     C#3 = C#2 & 
     G#3 = G#2 &
     AuthKey#3  = AuthKey#2 & 
     T1start#3  = T1start#2 &
     T1expire#3 = T1expire#2 &

     // ordering

     // Strangely the nonce N1 is not included in the response of A and
     // therefore the first ordering property does not hold.
     // St(1, C_1) < St(2, A_1) <

     St(2, A_2) < St(1, C_2) <
     St(1, C_3) < St(3, G_3)
     "

text{* 
Authentication for the server S is also rather weak, as it cannot check whether
the authenticator is compromised or not.
*}

property (of Kerberos) S_auth:
  premises
    "role(4) = S"
    "uncompromised(C#4, G#4, S#4)"
    "step(4, S_5)"
  imply threads 1, 3, 4 such that
    "
     // consequence from exchange with ticket granting server
     role(3) = G &
     C#4 = C#3 & 
     G#4 = G#3 &
     S#4 = S#3 &
     ServerKey#4 = ServerKey#3 &
     T2start#4   = T2start#3 &
     T2expire#4  = T2expire#3  
     
     // We only know that there is a ticket-granting server. For all we know he
     // could have grantet the ticket because of a forged request from a
     // compromised authenticator.

     // // consequence from exchange with client
     // role(1) = C &
     // C#1  = C#4 & 
     // G#1  = G#4 &
     // S#1  = S#4 &
     // // T2#1 = T2#4 &
     // T2start#1   = T2start#4 &
     // T2expire#1  = T2expire#4 &
     // ServerKey#1 = ServerKey#4 &

     // // ordering

     //              St(1, C_2) <
     // St(1, C_3) < St(3, G_3) <
     // St(3, G_4) < St(1, C_4) <
     // St(1, C_5) < St(4, S_5)
     "

property (of Kerberos) C_auth:
  premises
    "role(1) = C"
    "uncompromised(C#1, A#1, G#1, S#1)"
    "step(1, C_6)"
  imply threads 2, 3, 4 such that
    "
     // consequence from exchange with authenticator
     role(2) = A &
     A#1 = A#2 & 
     C#1 = C#2 & 
     G#1 = G#2 &
     AuthKey#1  = AuthKey#2 & 
     T1start#1  = T1start#2 &
     T1expire#1 = T1expire#2 &

     // consequence from exchange with ticket granting server
     role(3) = G &
     A#1 = A#3 & 
     C#1 = C#3 & 
     G#1 = G#3 &
     S#1 = S#3 &
     AuthKey#1   = AuthKey#3 &
     ServerKey#1 = ServerKey#3 &
     N2#1        = N2#3 &
     // T1#1        = T1#3 &  // !! This violates the requirement in SPORE
                              // TODO: Check why the claimed proofs have not
                              //       found this problem.
     T2start#1   = T2start#3 &
     T2expire#1  = T2expire#3 &

     // consequence from exchange with server
     role(4) = S &
     C#1  = C#4 & 
     G#1  = G#4 &
     S#1  = S#4 &
     T2#1 = T2#4 &
     T2start#1   = T2start#4 &
     T2expire#1  = T2expire#4 &
     ServerKey#1 = ServerKey#4 &

     // ordering

     // Strangely the nonce N1 is not included in the response of A and
     // therefore the first ordering property does not hold.
     // St(1, C_1) < St(2, A_1) <

     St(2, A_2) < St(1, C_2) <
     St(1, C_3) < St(3, G_3) <
     St(3, G_4) < St(1, C_4) <
     St(1, C_5) < St(4, S_5) <
     St(4, S_6) < St(1, C_6)
     "

end
