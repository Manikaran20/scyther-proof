theory Andrew_Secure_RPC begin

section{* Andrew Secure RPC *}

text{*
  Modeled after the model in the SPORE library.

  Notable differences:

    1. 'succ(x)' is invertible. Hence, we just model it as a tuple ('succ',x) of
       a global constant 'succ' and the variable x.  This means that we only
       exploit the tagging properties of 'succ', but do not assume any
       information hiding.

    2. Instead of implicit typing, we are using explicit global constants to
       discern messages.

  Note that when using a bidirectional key k[A,B] instead of the
  uni-directional key k(A,B) that is different depending on the used direction
  an attack becomes possible, as agreement on the agent identities is partially
  lost. Adding the A identity in the first message fixes that flaw.
*}

protocol Andrew {

  1. A -> B: A, { '1', Na               }k(A,B)
  2. A <- B:    { '2', ('succ', Na), Nb }k(A,B)
  3. A -> B:    { '3', ('succ', Nb)     }k(A,B)
  4. A <- B:    { '4', Kab, Nbp         }k(A,B)

}


subsection{* Security Properties *}

properties (of Andrew)
  B_sec_Kab: secret(B, -, Kab, {A, B})
  A_sec_Kab: secret(A, 4, Kab, {A, B})

property (of Andrew) A_noninjective_agreement:
  premises
    "role(1) = A"
    "step(1, A_4)"
    "uncompromised(A#1,B#1)"
  imply a thread 2 such that
    "  role(2) = B
     & A#1  = A#2
     & B#1  = B#2

     & Nbp#1 = Nbp#2
     & Kab#1 = Kab#2 "

text{*
The protocol does not achieve agreement over Na and Nb. They could be sent
by a different thread also executing the B role. Hence, the B-thread that sent
the key Kab does not agree on anything that is fresh from the perspective of A.
This gives rise to the claimed attack referenced in the SPORE library.
*}


property (of Andrew) B_noninjective_agreement:
  premises
    "role(1) = B"
    "step(1, B_3)"
    "uncompromised(A#1,B#1)"
  imply a thread 2 such that
    "  role(2) = A
     & A#1  = A#2
     & B#1  = B#2
     & Na#1 = Na#2
     & Nb#1 = Nb#2"

text{*
The protocol does not achieve agreement on the key because B cannot check if it
has been received.
*}

end
